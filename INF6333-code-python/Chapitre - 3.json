{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"Nm0pCVKWkZbg"},"source":["##**Classification avec les différents techniques d'apprentissage machine (ML).**"]},{"cell_type":"markdown","metadata":{"id":"2vLLC58brCNS"},"source":["Nous allons utiliser le jeu de données **MNIST**, qui est un ensemble de 70 000 images de chiffres manuscrits. Chaque image est étiquetée avec le chiffre qu'elle représente.\n","Le but est de  créer de différents modèle de classification avec le jeu de données MNIST. Pour cela, on doit entraîner et tester les données avec plusieurs algorithmes d'apprentissage machine. Ensuite, à partir des résultats obtenus, une étude comparative sera faite afin de choisir le meilleur modèle.\n"]},{"cell_type":"markdown","metadata":{"id":"0vEZJ-sRPL8N"},"source":["###**Préparation des donnees 'MNIST'**"]},{"cell_type":"code","metadata":{"id":"JqmMN7Ad9MLI"},"source":["#1. Utilisons sklearn.datasets pour télécharger le jeu de données MNIST\n","from sklearn.datasets import fetch_openml\n","mnist = fetch_openml('mnist_784', version=1, as_frame=False)"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(mnist)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nRjwVrRgEN5R","executionInfo":{"status":"ok","timestamp":1676099287196,"user_tz":300,"elapsed":139,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"4b310424-4731-4ff5-b615-6538fe1bb69f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'data': array([[0., 0., 0., ..., 0., 0., 0.],\n","       [0., 0., 0., ..., 0., 0., 0.],\n","       [0., 0., 0., ..., 0., 0., 0.],\n","       ...,\n","       [0., 0., 0., ..., 0., 0., 0.],\n","       [0., 0., 0., ..., 0., 0., 0.],\n","       [0., 0., 0., ..., 0., 0., 0.]]), 'target': array(['5', '0', '4', ..., '4', '5', '6'], dtype=object), 'frame': None, 'categories': {}, 'feature_names': ['pixel1', 'pixel2', 'pixel3', 'pixel4', 'pixel5', 'pixel6', 'pixel7', 'pixel8', 'pixel9', 'pixel10', 'pixel11', 'pixel12', 'pixel13', 'pixel14', 'pixel15', 'pixel16', 'pixel17', 'pixel18', 'pixel19', 'pixel20', 'pixel21', 'pixel22', 'pixel23', 'pixel24', 'pixel25', 'pixel26', 'pixel27', 'pixel28', 'pixel29', 'pixel30', 'pixel31', 'pixel32', 'pixel33', 'pixel34', 'pixel35', 'pixel36', 'pixel37', 'pixel38', 'pixel39', 'pixel40', 'pixel41', 'pixel42', 'pixel43', 'pixel44', 'pixel45', 'pixel46', 'pixel47', 'pixel48', 'pixel49', 'pixel50', 'pixel51', 'pixel52', 'pixel53', 'pixel54', 'pixel55', 'pixel56', 'pixel57', 'pixel58', 'pixel59', 'pixel60', 'pixel61', 'pixel62', 'pixel63', 'pixel64', 'pixel65', 'pixel66', 'pixel67', 'pixel68', 'pixel69', 'pixel70', 'pixel71', 'pixel72', 'pixel73', 'pixel74', 'pixel75', 'pixel76', 'pixel77', 'pixel78', 'pixel79', 'pixel80', 'pixel81', 'pixel82', 'pixel83', 'pixel84', 'pixel85', 'pixel86', 'pixel87', 'pixel88', 'pixel89', 'pixel90', 'pixel91', 'pixel92', 'pixel93', 'pixel94', 'pixel95', 'pixel96', 'pixel97', 'pixel98', 'pixel99', 'pixel100', 'pixel101', 'pixel102', 'pixel103', 'pixel104', 'pixel105', 'pixel106', 'pixel107', 'pixel108', 'pixel109', 'pixel110', 'pixel111', 'pixel112', 'pixel113', 'pixel114', 'pixel115', 'pixel116', 'pixel117', 'pixel118', 'pixel119', 'pixel120', 'pixel121', 'pixel122', 'pixel123', 'pixel124', 'pixel125', 'pixel126', 'pixel127', 'pixel128', 'pixel129', 'pixel130', 'pixel131', 'pixel132', 'pixel133', 'pixel134', 'pixel135', 'pixel136', 'pixel137', 'pixel138', 'pixel139', 'pixel140', 'pixel141', 'pixel142', 'pixel143', 'pixel144', 'pixel145', 'pixel146', 'pixel147', 'pixel148', 'pixel149', 'pixel150', 'pixel151', 'pixel152', 'pixel153', 'pixel154', 'pixel155', 'pixel156', 'pixel157', 'pixel158', 'pixel159', 'pixel160', 'pixel161', 'pixel162', 'pixel163', 'pixel164', 'pixel165', 'pixel166', 'pixel167', 'pixel168', 'pixel169', 'pixel170', 'pixel171', 'pixel172', 'pixel173', 'pixel174', 'pixel175', 'pixel176', 'pixel177', 'pixel178', 'pixel179', 'pixel180', 'pixel181', 'pixel182', 'pixel183', 'pixel184', 'pixel185', 'pixel186', 'pixel187', 'pixel188', 'pixel189', 'pixel190', 'pixel191', 'pixel192', 'pixel193', 'pixel194', 'pixel195', 'pixel196', 'pixel197', 'pixel198', 'pixel199', 'pixel200', 'pixel201', 'pixel202', 'pixel203', 'pixel204', 'pixel205', 'pixel206', 'pixel207', 'pixel208', 'pixel209', 'pixel210', 'pixel211', 'pixel212', 'pixel213', 'pixel214', 'pixel215', 'pixel216', 'pixel217', 'pixel218', 'pixel219', 'pixel220', 'pixel221', 'pixel222', 'pixel223', 'pixel224', 'pixel225', 'pixel226', 'pixel227', 'pixel228', 'pixel229', 'pixel230', 'pixel231', 'pixel232', 'pixel233', 'pixel234', 'pixel235', 'pixel236', 'pixel237', 'pixel238', 'pixel239', 'pixel240', 'pixel241', 'pixel242', 'pixel243', 'pixel244', 'pixel245', 'pixel246', 'pixel247', 'pixel248', 'pixel249', 'pixel250', 'pixel251', 'pixel252', 'pixel253', 'pixel254', 'pixel255', 'pixel256', 'pixel257', 'pixel258', 'pixel259', 'pixel260', 'pixel261', 'pixel262', 'pixel263', 'pixel264', 'pixel265', 'pixel266', 'pixel267', 'pixel268', 'pixel269', 'pixel270', 'pixel271', 'pixel272', 'pixel273', 'pixel274', 'pixel275', 'pixel276', 'pixel277', 'pixel278', 'pixel279', 'pixel280', 'pixel281', 'pixel282', 'pixel283', 'pixel284', 'pixel285', 'pixel286', 'pixel287', 'pixel288', 'pixel289', 'pixel290', 'pixel291', 'pixel292', 'pixel293', 'pixel294', 'pixel295', 'pixel296', 'pixel297', 'pixel298', 'pixel299', 'pixel300', 'pixel301', 'pixel302', 'pixel303', 'pixel304', 'pixel305', 'pixel306', 'pixel307', 'pixel308', 'pixel309', 'pixel310', 'pixel311', 'pixel312', 'pixel313', 'pixel314', 'pixel315', 'pixel316', 'pixel317', 'pixel318', 'pixel319', 'pixel320', 'pixel321', 'pixel322', 'pixel323', 'pixel324', 'pixel325', 'pixel326', 'pixel327', 'pixel328', 'pixel329', 'pixel330', 'pixel331', 'pixel332', 'pixel333', 'pixel334', 'pixel335', 'pixel336', 'pixel337', 'pixel338', 'pixel339', 'pixel340', 'pixel341', 'pixel342', 'pixel343', 'pixel344', 'pixel345', 'pixel346', 'pixel347', 'pixel348', 'pixel349', 'pixel350', 'pixel351', 'pixel352', 'pixel353', 'pixel354', 'pixel355', 'pixel356', 'pixel357', 'pixel358', 'pixel359', 'pixel360', 'pixel361', 'pixel362', 'pixel363', 'pixel364', 'pixel365', 'pixel366', 'pixel367', 'pixel368', 'pixel369', 'pixel370', 'pixel371', 'pixel372', 'pixel373', 'pixel374', 'pixel375', 'pixel376', 'pixel377', 'pixel378', 'pixel379', 'pixel380', 'pixel381', 'pixel382', 'pixel383', 'pixel384', 'pixel385', 'pixel386', 'pixel387', 'pixel388', 'pixel389', 'pixel390', 'pixel391', 'pixel392', 'pixel393', 'pixel394', 'pixel395', 'pixel396', 'pixel397', 'pixel398', 'pixel399', 'pixel400', 'pixel401', 'pixel402', 'pixel403', 'pixel404', 'pixel405', 'pixel406', 'pixel407', 'pixel408', 'pixel409', 'pixel410', 'pixel411', 'pixel412', 'pixel413', 'pixel414', 'pixel415', 'pixel416', 'pixel417', 'pixel418', 'pixel419', 'pixel420', 'pixel421', 'pixel422', 'pixel423', 'pixel424', 'pixel425', 'pixel426', 'pixel427', 'pixel428', 'pixel429', 'pixel430', 'pixel431', 'pixel432', 'pixel433', 'pixel434', 'pixel435', 'pixel436', 'pixel437', 'pixel438', 'pixel439', 'pixel440', 'pixel441', 'pixel442', 'pixel443', 'pixel444', 'pixel445', 'pixel446', 'pixel447', 'pixel448', 'pixel449', 'pixel450', 'pixel451', 'pixel452', 'pixel453', 'pixel454', 'pixel455', 'pixel456', 'pixel457', 'pixel458', 'pixel459', 'pixel460', 'pixel461', 'pixel462', 'pixel463', 'pixel464', 'pixel465', 'pixel466', 'pixel467', 'pixel468', 'pixel469', 'pixel470', 'pixel471', 'pixel472', 'pixel473', 'pixel474', 'pixel475', 'pixel476', 'pixel477', 'pixel478', 'pixel479', 'pixel480', 'pixel481', 'pixel482', 'pixel483', 'pixel484', 'pixel485', 'pixel486', 'pixel487', 'pixel488', 'pixel489', 'pixel490', 'pixel491', 'pixel492', 'pixel493', 'pixel494', 'pixel495', 'pixel496', 'pixel497', 'pixel498', 'pixel499', 'pixel500', 'pixel501', 'pixel502', 'pixel503', 'pixel504', 'pixel505', 'pixel506', 'pixel507', 'pixel508', 'pixel509', 'pixel510', 'pixel511', 'pixel512', 'pixel513', 'pixel514', 'pixel515', 'pixel516', 'pixel517', 'pixel518', 'pixel519', 'pixel520', 'pixel521', 'pixel522', 'pixel523', 'pixel524', 'pixel525', 'pixel526', 'pixel527', 'pixel528', 'pixel529', 'pixel530', 'pixel531', 'pixel532', 'pixel533', 'pixel534', 'pixel535', 'pixel536', 'pixel537', 'pixel538', 'pixel539', 'pixel540', 'pixel541', 'pixel542', 'pixel543', 'pixel544', 'pixel545', 'pixel546', 'pixel547', 'pixel548', 'pixel549', 'pixel550', 'pixel551', 'pixel552', 'pixel553', 'pixel554', 'pixel555', 'pixel556', 'pixel557', 'pixel558', 'pixel559', 'pixel560', 'pixel561', 'pixel562', 'pixel563', 'pixel564', 'pixel565', 'pixel566', 'pixel567', 'pixel568', 'pixel569', 'pixel570', 'pixel571', 'pixel572', 'pixel573', 'pixel574', 'pixel575', 'pixel576', 'pixel577', 'pixel578', 'pixel579', 'pixel580', 'pixel581', 'pixel582', 'pixel583', 'pixel584', 'pixel585', 'pixel586', 'pixel587', 'pixel588', 'pixel589', 'pixel590', 'pixel591', 'pixel592', 'pixel593', 'pixel594', 'pixel595', 'pixel596', 'pixel597', 'pixel598', 'pixel599', 'pixel600', 'pixel601', 'pixel602', 'pixel603', 'pixel604', 'pixel605', 'pixel606', 'pixel607', 'pixel608', 'pixel609', 'pixel610', 'pixel611', 'pixel612', 'pixel613', 'pixel614', 'pixel615', 'pixel616', 'pixel617', 'pixel618', 'pixel619', 'pixel620', 'pixel621', 'pixel622', 'pixel623', 'pixel624', 'pixel625', 'pixel626', 'pixel627', 'pixel628', 'pixel629', 'pixel630', 'pixel631', 'pixel632', 'pixel633', 'pixel634', 'pixel635', 'pixel636', 'pixel637', 'pixel638', 'pixel639', 'pixel640', 'pixel641', 'pixel642', 'pixel643', 'pixel644', 'pixel645', 'pixel646', 'pixel647', 'pixel648', 'pixel649', 'pixel650', 'pixel651', 'pixel652', 'pixel653', 'pixel654', 'pixel655', 'pixel656', 'pixel657', 'pixel658', 'pixel659', 'pixel660', 'pixel661', 'pixel662', 'pixel663', 'pixel664', 'pixel665', 'pixel666', 'pixel667', 'pixel668', 'pixel669', 'pixel670', 'pixel671', 'pixel672', 'pixel673', 'pixel674', 'pixel675', 'pixel676', 'pixel677', 'pixel678', 'pixel679', 'pixel680', 'pixel681', 'pixel682', 'pixel683', 'pixel684', 'pixel685', 'pixel686', 'pixel687', 'pixel688', 'pixel689', 'pixel690', 'pixel691', 'pixel692', 'pixel693', 'pixel694', 'pixel695', 'pixel696', 'pixel697', 'pixel698', 'pixel699', 'pixel700', 'pixel701', 'pixel702', 'pixel703', 'pixel704', 'pixel705', 'pixel706', 'pixel707', 'pixel708', 'pixel709', 'pixel710', 'pixel711', 'pixel712', 'pixel713', 'pixel714', 'pixel715', 'pixel716', 'pixel717', 'pixel718', 'pixel719', 'pixel720', 'pixel721', 'pixel722', 'pixel723', 'pixel724', 'pixel725', 'pixel726', 'pixel727', 'pixel728', 'pixel729', 'pixel730', 'pixel731', 'pixel732', 'pixel733', 'pixel734', 'pixel735', 'pixel736', 'pixel737', 'pixel738', 'pixel739', 'pixel740', 'pixel741', 'pixel742', 'pixel743', 'pixel744', 'pixel745', 'pixel746', 'pixel747', 'pixel748', 'pixel749', 'pixel750', 'pixel751', 'pixel752', 'pixel753', 'pixel754', 'pixel755', 'pixel756', 'pixel757', 'pixel758', 'pixel759', 'pixel760', 'pixel761', 'pixel762', 'pixel763', 'pixel764', 'pixel765', 'pixel766', 'pixel767', 'pixel768', 'pixel769', 'pixel770', 'pixel771', 'pixel772', 'pixel773', 'pixel774', 'pixel775', 'pixel776', 'pixel777', 'pixel778', 'pixel779', 'pixel780', 'pixel781', 'pixel782', 'pixel783', 'pixel784'], 'target_names': ['class'], 'DESCR': \"**Author**: Yann LeCun, Corinna Cortes, Christopher J.C. Burges  \\n**Source**: [MNIST Website](http://yann.lecun.com/exdb/mnist/) - Date unknown  \\n**Please cite**:  \\n\\nThe MNIST database of handwritten digits with 784 features, raw data available at: http://yann.lecun.com/exdb/mnist/. It can be split in a training set of the first 60,000 examples, and a test set of 10,000 examples  \\n\\nIt is a subset of a larger set available from NIST. The digits have been size-normalized and centered in a fixed-size image. It is a good database for people who want to try learning techniques and pattern recognition methods on real-world data while spending minimal efforts on preprocessing and formatting. The original black and white (bilevel) images from NIST were size normalized to fit in a 20x20 pixel box while preserving their aspect ratio. The resulting images contain grey levels as a result of the anti-aliasing technique used by the normalization algorithm. the images were centered in a 28x28 image by computing the center of mass of the pixels, and translating the image so as to position this point at the center of the 28x28 field.  \\n\\nWith some classification methods (particularly template-based methods, such as SVM and K-nearest neighbors), the error rate improves when the digits are centered by bounding box rather than center of mass. If you do this kind of pre-processing, you should report it in your publications. The MNIST database was constructed from NIST's NIST originally designated SD-3 as their training set and SD-1 as their test set. However, SD-3 is much cleaner and easier to recognize than SD-1. The reason for this can be found on the fact that SD-3 was collected among Census Bureau employees, while SD-1 was collected among high-school students. Drawing sensible conclusions from learning experiments requires that the result be independent of the choice of training set and test among the complete set of samples. Therefore it was necessary to build a new database by mixing NIST's datasets.  \\n\\nThe MNIST training set is composed of 30,000 patterns from SD-3 and 30,000 patterns from SD-1. Our test set was composed of 5,000 patterns from SD-3 and 5,000 patterns from SD-1. The 60,000 pattern training set contained examples from approximately 250 writers. We made sure that the sets of writers of the training set and test set were disjoint. SD-1 contains 58,527 digit images written by 500 different writers. In contrast to SD-3, where blocks of data from each writer appeared in sequence, the data in SD-1 is scrambled. Writer identities for SD-1 is available and we used this information to unscramble the writers. We then split SD-1 in two: characters written by the first 250 writers went into our new training set. The remaining 250 writers were placed in our test set. Thus we had two sets with nearly 30,000 examples each. The new training set was completed with enough examples from SD-3, starting at pattern # 0, to make a full set of 60,000 training patterns. Similarly, the new test set was completed with SD-3 examples starting at pattern # 35,000 to make a full set with 60,000 test patterns. Only a subset of 10,000 test images (5,000 from SD-1 and 5,000 from SD-3) is available on this site. The full 60,000 sample training set is available.\\n\\nDownloaded from openml.org.\", 'details': {'id': '554', 'name': 'mnist_784', 'version': '1', 'description_version': '1', 'format': 'ARFF', 'creator': ['Yann LeCun', 'Corinna Cortes', 'Christopher J.C. Burges'], 'upload_date': '2014-09-29T03:28:38', 'language': 'English', 'licence': 'Public', 'url': 'https://api.openml.org/data/v1/download/52667/mnist_784.arff', 'parquet_url': 'http://openml1.win.tue.nl/dataset554/dataset_554.pq', 'file_id': '52667', 'default_target_attribute': 'class', 'tag': ['AzurePilot', 'OpenML-CC18', 'OpenML100', 'study_1', 'study_123', 'study_41', 'study_99', 'vision'], 'visibility': 'public', 'minio_url': 'http://openml1.win.tue.nl/dataset554/dataset_554.pq', 'status': 'active', 'processing_date': '2020-11-20 20:12:09', 'md5_checksum': '0298d579eb1b86163de7723944c7e495'}, 'url': 'https://www.openml.org/d/554'}\n"]}]},{"cell_type":"code","source":["mnist.keys()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WS7Fd27UJkEE","executionInfo":{"status":"ok","timestamp":1676099298650,"user_tz":300,"elapsed":182,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"7e8bbd93-6766-4ac6-dbba-c0c720612695"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_keys(['data', 'target', 'frame', 'categories', 'feature_names', 'target_names', 'DESCR', 'details', 'url'])"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"joPNEbkG_QQW","executionInfo":{"status":"ok","timestamp":1676099308888,"user_tz":300,"elapsed":138,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"95d84d9b-0c06-485d-bb2c-ed2495bf3fb6"},"source":["# Dans ce qui suit, pour entraîner notre modèle ML, nous avons besoin de donnes des images sous format np ainsi que la cible de chaqu'un de ces images.\n","#2. Préparons les vecteurs X, y qui représente respectivement \"data\", \"target\" à partir du dictionnaire que vous avez telecharger.\n","X, y = mnist[\"data\"], mnist[\"target\"]\n","print (X.shape)\n","print (y.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(70000, 784)\n","(70000,)\n"]}]},{"cell_type":"code","source":["some_digit = X[1]\n","some_digit"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sv2XlvY8IOng","executionInfo":{"status":"ok","timestamp":1676099319077,"user_tz":300,"elapsed":129,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"957139f5-ae81-4b83-d638-d3593b8eb4fe"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,  51., 159., 253., 159.,  50.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","        48., 238., 252., 252., 252., 237.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,  54., 227., 253., 252., 239., 233.,\n","       252.,  57.,   6.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  10.,  60.,\n","       224., 252., 253., 252., 202.,  84., 252., 253., 122.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0., 163., 252., 252., 252., 253., 252., 252.,\n","        96., 189., 253., 167.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  51., 238.,\n","       253., 253., 190., 114., 253., 228.,  47.,  79., 255., 168.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,  48., 238., 252., 252., 179.,  12.,  75., 121.,\n","        21.,   0.,   0., 253., 243.,  50.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  38., 165., 253.,\n","       233., 208.,  84.,   0.,   0.,   0.,   0.,   0.,   0., 253., 252.,\n","       165.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   7., 178., 252., 240.,  71.,  19.,  28.,   0.,   0.,\n","         0.,   0.,   0.,   0., 253., 252., 195.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  57., 252., 252.,\n","        63.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0., 253.,\n","       252., 195.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0., 198., 253., 190.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0., 255., 253., 196.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  76., 246., 252.,\n","       112.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","       253., 252., 148.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,  85., 252., 230.,  25.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   7., 135., 253., 186.,  12.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  85., 252.,\n","       223.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   7., 131.,\n","       252., 225.,  71.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,  85., 252., 145.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,  48., 165., 252., 173.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  86.,\n","       253., 225.,   0.,   0.,   0.,   0.,   0.,   0., 114., 238., 253.,\n","       162.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,  85., 252., 249., 146.,  48.,  29.,\n","        85., 178., 225., 253., 223., 167.,  56.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","        85., 252., 252., 252., 229., 215., 252., 252., 252., 196., 130.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,  28., 199., 252., 252., 253.,\n","       252., 252., 233., 145.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,  25., 128., 252., 253., 252., 141.,  37.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n","         0.,   0.,   0.])"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":267},"id":"73MmWx43BjU5","executionInfo":{"status":"ok","timestamp":1676099545663,"user_tz":300,"elapsed":148,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"bd974079-bea2-44a4-cc1d-2e285f248952"},"source":["#3. Avec matplotlib, afficher quelques chiffres manuscrits ainsi que la cible correspondante.\n","import matplotlib.pyplot as plt\n","\n","some_digit = X[1]\n","some_digit_image = some_digit.reshape(28, 28)\n","plt.imshow(some_digit_image,cmap='gray')\n","plt.axis(\"off\")\n","plt.show()\n","\n","y[1]"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}},{"output_type":"execute_result","data":{"text/plain":["'0'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UpFfT-8Ndvwq","executionInfo":{"status":"ok","timestamp":1676099667267,"user_tz":300,"elapsed":150,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"ea203f6b-83fa-43ca-fa53-db050b56ae75"},"source":["#4. Quel est le type de la cible y?\n","type(y[1])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["str"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["type(X[1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"embP8qzEKJz4","executionInfo":{"status":"ok","timestamp":1676099669105,"user_tz":300,"elapsed":171,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"9856e665-3490-4559-8d4c-2eefd7284f81"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["numpy.ndarray"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dKNSwoDpfLru","executionInfo":{"status":"ok","timestamp":1676099695868,"user_tz":300,"elapsed":1031,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"97a2ce1f-16f7-4e84-9e73-b79f4566ecfd"},"source":["#6. Diviser le DataFrame en données d'entraînement et données de test en utilisant sklearn (80% pour l'entraînement et 20% pour le test).\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n","print(X_train.shape)\n","print(X_test.shape)\n","print(y_train.shape)\n","print(y_test.shape)\n","\n","#NB : on obtient 56 000 images pour faire notre entrainement ey 14 000 images pour faire notre test (validation)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(56000, 784)\n","(14000, 784)\n","(56000,)\n","(14000,)\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WnIGpiFweKV2","executionInfo":{"status":"ok","timestamp":1676099699175,"user_tz":300,"elapsed":490,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"57a20a6e-f8ee-4b27-ca1d-33cc948e8e0a"},"source":["#5. Avec numpy, convertir le vecteur cible y_train, y_test en entier.\n","import numpy as np\n","y_train = y_train.astype(np.uint8)\n","y_test = y_test.astype(np.uint8)\n","type(y_train[0])\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["numpy.uint8"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["y_train[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M3i8KZOvK7fY","executionInfo":{"status":"ok","timestamp":1676099702489,"user_tz":300,"elapsed":138,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"7b8aa99f-b9a4-45d8-e8d6-8e3cb587e6af"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"1DLt2Yuh8W9K"},"source":["###**K–Nearest Neighbor (Multiclasses classification)**"]},{"cell_type":"code","metadata":{"id":"SVTKBDKGK5fi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1676099981373,"user_tz":300,"elapsed":344,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"48573cfd-b846-4239-bc8c-f2f4559a0655"},"source":["%%time\n","# Construction, entrainement et test des données avec le knn \"K–Nearest Neighbor\".\n","from sklearn.neighbors import KNeighborsClassifier\n","\n","#Construction\n","knn_classifier = KNeighborsClassifier()\n","#Entrainement\n","knn_classifier.fit(X_train, y_train)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 113 ms, sys: 12 ms, total: 125 ms\n","Wall time: 259 ms\n"]},{"output_type":"execute_result","data":{"text/plain":["KNeighborsClassifier()"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["#Test\n","y_pred_knn = knn_classifier.predict(X_test)"],"metadata":{"id":"ljcjyN4mLJqd"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-4MVCNBSLTjF","executionInfo":{"status":"ok","timestamp":1676100039742,"user_tz":300,"elapsed":158,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"142d8779-d281-4218-d59c-529c7bc84d9f"},"source":["#Calcul de la matrice de confusion\n","from sklearn.metrics import confusion_matrix\n","cm_knn = confusion_matrix(y_test, y_pred_knn)\n","print(cm_knn)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1375    1    1    0    0    1    4    0    1    1]\n"," [   0 1547    1    0    1    0    1    3    0    1]\n"," [   9    9 1316    3    1    1    2   15    4    2]\n"," [   2    3    6 1354    1   15    0    5    7   11]\n"," [   0   16    1    1 1365    0    4    4    0   22]\n"," [   3    1    0   17    2 1261    7    1    0    2]\n"," [   5    4    0    0    2    5 1364    0    0    0]\n"," [   0   17    7    0    2    0    0 1463    1   23]\n"," [   9   16    4   10    6   23    5    3 1218   15]\n"," [   2    3    3    9   11    3    0   14    3 1339]]\n"]}]},{"cell_type":"code","source":["#Calculer la somme\n","np.sum(cm_knn, axis=0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C16-skhnVtY5","executionInfo":{"status":"ok","timestamp":1676100127076,"user_tz":300,"elapsed":137,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"dd5aecbb-9c68-40d0-9f0a-5e3136dcb608"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1405, 1617, 1339, 1394, 1391, 1309, 1387, 1508, 1234, 1416])"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pK6XfJRXLbAe","executionInfo":{"status":"ok","timestamp":1676100146633,"user_tz":300,"elapsed":140,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"5479d791-3701-4702-9f67-92efc6aeb6cd"},"source":["#Calcul des metriques :  accuracy_score, precision_score, recall_score et f1_score pour le modèle knn.\n","\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n","accuracy_score_knn = accuracy_score(y_test, y_pred_knn)\n","precision_score_knn = precision_score(y_test, y_pred_knn, average='macro')\n","recall_score_knn = recall_score(y_test, y_pred_knn, average='macro')\n","f1_score_knn = f1_score(y_test, y_pred_knn, average='macro')\n","\n","print(\"accuracy knn = \",accuracy_score_knn)\n","print(\"precision knn = \",precision_score_knn)\n","print(\"recall knn = \",recall_score_knn)\n","print(\"f1 knn = \",f1_score_knn)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["accuracy knn =  0.9715714285714285\n","precision knn =  0.9720357542772723\n","recall knn =  0.9711366701619639\n","f1 knn =  0.9714300602040444\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.metrics import classification_report\n","report = classification_report(y_test, y_pred_knn)\n","print(report)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qXGFjogQf61Z","executionInfo":{"status":"ok","timestamp":1675096159139,"user_tz":300,"elapsed":188,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"c303edce-70dc-43df-d8c3-27c2fc746ea8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.98      1.00      0.99      1418\n","           1       0.95      1.00      0.97      1538\n","           2       0.99      0.97      0.98      1375\n","           3       0.97      0.97      0.97      1446\n","           4       0.98      0.97      0.97      1362\n","           5       0.97      0.97      0.97      1280\n","           6       0.98      0.99      0.98      1399\n","           7       0.96      0.97      0.97      1452\n","           8       0.99      0.93      0.96      1387\n","           9       0.95      0.96      0.96      1343\n","\n","    accuracy                           0.97     14000\n","   macro avg       0.97      0.97      0.97     14000\n","weighted avg       0.97      0.97      0.97     14000\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"b8zq1Y1J77Ge"},"source":["###**Decision Tree Classifier (Multiclasses classification)**"]},{"cell_type":"code","metadata":{"id":"Tifn8DSUOOaw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1676100389708,"user_tz":300,"elapsed":19466,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"c64d650c-12b2-491a-9dbf-d401ffffb9fe"},"source":["# Construction, entrainement et test des données avec le l'algorithme DT \"Decision Tree Classifier\".\n","\n","%%time\n","from sklearn.tree import DecisionTreeClassifier\n","#Construction\n","dt_classifier = DecisionTreeClassifier()\n","#Entrainement\n","dt_classifier.fit(X_train, y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 19.1 s, sys: 52.3 ms, total: 19.2 s\n","Wall time: 19.2 s\n"]},{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier()"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["#Test\n","y_pred_dt = dt_classifier.predict(X_test)"],"metadata":{"id":"Tw7wEWV3oKfo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Calcul de la matrice de confusion\n","from sklearn.metrics import confusion_matrix\n","cm_dt = confusion_matrix(y_test, y_pred_dt)\n","print(cm_dt)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-bBjbxJ8oKa3","executionInfo":{"status":"ok","timestamp":1676100396805,"user_tz":300,"elapsed":368,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"11360b73-b262-4108-af3a-360343e08894"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1266    4   26    9    3   23   16    7   22    8]\n"," [   1 1481   10    9    8    4    4   15   17    5]\n"," [  26   14 1146   38   23   12   19   28   35   21]\n"," [   8   12   40 1155   13   62    7   17   54   36]\n"," [  13    5   27   15 1199   10   24   14   25   81]\n"," [  26   17   13   57   10 1080   26    7   31   27]\n"," [  22    5   20   15   17   41 1224    6   25    5]\n"," [   1    7   25   26   25   10    2 1352   18   47]\n"," [  20   25   42   26   35   40   20   15 1052   34]\n"," [   4    6   18   24   72   16    7   41   43 1156]]\n"]}]},{"cell_type":"code","source":["#Calcul de accuracy_score, precision_score, recall_score et f1_score pour le modèle dt.\n","\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n","accuracy_score_dt = accuracy_score(y_test, y_pred_dt)\n","precision_score_dt = precision_score(y_test, y_pred_dt, average='macro')\n","recall_score_dt = recall_score(y_test, y_pred_dt, average='macro')\n","f1_score_dt = f1_score(y_test, y_pred_dt, average='macro')\n","\n","print(\"accuracy dt = \",accuracy_score_dt)\n","print(\"precision dt = \",precision_score_dt)\n","print(\"recall dt = \",recall_score_dt)\n","print(\"f1 dt = \",f1_score_dt)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NuPdsgsdoKWg","executionInfo":{"status":"ok","timestamp":1676100401811,"user_tz":300,"elapsed":158,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"b75698d6-7493-42e3-efa0-51a8a1f8dc27"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["accuracy dt =  0.8650714285714286\n","precision dt =  0.8634176151242121\n","recall dt =  0.8632659953078944\n","f1 dt =  0.8633000496679804\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"VgnM944koKSw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Z9L9XAkJNaNt"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"27HVmrRw8MeA"},"source":["###**Random Forest Classifier (Multiclasses classification)**"]},{"cell_type":"code","metadata":{"id":"w1LxfWxKMjj5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1676100466134,"user_tz":300,"elapsed":35550,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"5e55317a-781b-4b32-d54d-89ed95db37fc"},"source":["# Construction, entrainement et test des données avec le RF \"Random Forest Classifier\".\n","\n","%%time\n","from sklearn.ensemble import RandomForestClassifier\n","\n","#Construction\n","rf_classifier = RandomForestClassifier()\n","#Entrainement\n","rf_classifier.fit(X_train, y_train)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 35.1 s, sys: 145 ms, total: 35.3 s\n","Wall time: 35.4 s\n"]},{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier()"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["#Test\n","y_pred_rf = rf_classifier.predict(X_test)"],"metadata":{"id":"TY2ovdL2nJXZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Calcul de la matrice de confusion\n","from sklearn.metrics import confusion_matrix\n","cm_rf = confusion_matrix(y_test, y_pred_rf)\n","print(cm_rf)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wQCLpDXunURI","executionInfo":{"status":"ok","timestamp":1676100473680,"user_tz":300,"elapsed":145,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"9ad198cf-7bb8-4e25-a6fa-622c3621aad5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1365    1    5    0    1    1    4    0    7    0]\n"," [   0 1536    6    2    1    0    2    2    2    3]\n"," [   8    1 1322    6    4    0    3    7   10    1]\n"," [   3    1   20 1343    1    9    0    9    8   10]\n"," [   3    3    6    0 1361    0   11    2    7   20]\n"," [   4    0    2   16    2 1250    6    1    9    4]\n"," [   3    2    2    0    1   11 1360    0    1    0]\n"," [   2    3   15    3    6    0    0 1460    2   22]\n"," [   1    4    5   10    7    8    5    1 1253   15]\n"," [   2    4    1   16   20    3    0    8    8 1325]]\n"]}]},{"cell_type":"code","source":["#Calcul de accuracy_score, precision_score, recall_score et f1_score pour le modèle rf.\n","\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n","accuracy_score_rf = accuracy_score(y_test, y_pred_rf)\n","precision_score_rf = precision_score(y_test, y_pred_rf, average='macro')\n","recall_score_rf = recall_score(y_test, y_pred_rf, average='macro')\n","f1_score_rf = f1_score(y_test, y_pred_rf, average='macro')\n","\n","print(\"accuracy rf = \",accuracy_score_rf)\n","print(\"precision rf = \",precision_score_rf)\n","print(\"recall rf = \",recall_score_rf)\n","print(\"f1 rf = \",f1_score_rf)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NzAXbjqrnUIZ","executionInfo":{"status":"ok","timestamp":1676100476155,"user_tz":300,"elapsed":2,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"f91abd67-cf68-476a-e275-80578e99d3f0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["accuracy rf =  0.9696428571428571\n","precision rf =  0.9693430906055551\n","recall rf =  0.96940645345147\n","f1 rf =  0.969354703724154\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"UciEfnvQn45v"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Dmti5n5MneWA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"VwWUv36JNtbO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uiC6qhvlP5S8"},"source":["###**Discution des résultats obtenus par les différents algorithmes ML**"]},{"cell_type":"code","metadata":{"id":"6pBzXM6JQLzo","colab":{"base_uri":"https://localhost:8080/","height":606},"executionInfo":{"status":"ok","timestamp":1676100487756,"user_tz":300,"elapsed":340,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"3a9d8bc4-1c63-4244-e339-d6c5dba66d24"},"source":["#Utiliser la bibliothèque matplotlib pour tracer \"Grouped bar chart\" pour faciliter la comparaison entre les algorithmes ML.\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","plt.figure(figsize=(20,10))\n","\n","score_knn = [accuracy_score_knn, precision_score_knn, recall_score_knn, f1_score_knn]\n","score_dt = [accuracy_score_dt, precision_score_dt, recall_score_dt, f1_score_dt]\n","score_rf = [accuracy_score_rf, precision_score_rf, recall_score_rf, f1_score_rf]\n","\n","barWidth = 0.1  # the width of the bars\n","\n","# Set position of bar on X axis\n","r1 = np.arange(4)\n","r2 = [x + barWidth for x in r1]\n","r3 = [x + barWidth for x in r2]\n","\n","# Make the plot\n","plt.bar(r1, score_knn, color='blue', width=barWidth, edgecolor='white', label='K–Nearest Neighbor')\n","plt.bar(r2, score_dt, color='orange', width=barWidth, edgecolor='white', label='Decision Tree')\n","plt.bar(r3, score_rf, color='gray', width=barWidth, edgecolor='white', label='Random Forest')\n","\n","# Add xticks on the middle of the group bars\n","plt.xlabel('Resultats', fontweight='bold')\n","plt.xticks([r + barWidth for r in range(4)], ['accuracy', 'precision', 'recall', 'f1'])\n","\n","# Create legend & Show graphic\n","plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1440x720 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"CL5OlQqeJxTz"},"source":["###**Exercice : (supplémentaire)**  Entrainement d'un modèle de régression en utilisant les SVM avec le jeu données (California housing dataset)."]},{"cell_type":"markdown","metadata":{"id":"ywY_hdVjKA6D"},"source":["Entrainement d'un modèle de régression en utilisant les SVM avec le jeu données (California housing dataset)."]},{"cell_type":"markdown","metadata":{"id":"O5o1UWb8KpW6"},"source":["1. Télécharger le jeu de données \"California housing\" avec la bibliothèque scikit-learn."]},{"cell_type":"code","metadata":{"id":"_VgpI80bKs2p"},"source":["from sklearn.datasets import fetch_california_housing\n","\n","housing = fetch_california_housing()\n","X = housing[\"data\"]\n","y = housing[\"target\"]"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["housing"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P8Oo7udaDHH0","executionInfo":{"status":"ok","timestamp":1675700727915,"user_tz":300,"elapsed":527,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"b129303d-6694-401b-ca07-90a6732e5acb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'data': array([[   8.3252    ,   41.        ,    6.98412698, ...,    2.55555556,\n","           37.88      , -122.23      ],\n","        [   8.3014    ,   21.        ,    6.23813708, ...,    2.10984183,\n","           37.86      , -122.22      ],\n","        [   7.2574    ,   52.        ,    8.28813559, ...,    2.80225989,\n","           37.85      , -122.24      ],\n","        ...,\n","        [   1.7       ,   17.        ,    5.20554273, ...,    2.3256351 ,\n","           39.43      , -121.22      ],\n","        [   1.8672    ,   18.        ,    5.32951289, ...,    2.12320917,\n","           39.43      , -121.32      ],\n","        [   2.3886    ,   16.        ,    5.25471698, ...,    2.61698113,\n","           39.37      , -121.24      ]]),\n"," 'target': array([4.526, 3.585, 3.521, ..., 0.923, 0.847, 0.894]),\n"," 'frame': None,\n"," 'target_names': ['MedHouseVal'],\n"," 'feature_names': ['MedInc',\n","  'HouseAge',\n","  'AveRooms',\n","  'AveBedrms',\n","  'Population',\n","  'AveOccup',\n","  'Latitude',\n","  'Longitude'],\n"," 'DESCR': '.. _california_housing_dataset:\\n\\nCalifornia Housing dataset\\n--------------------------\\n\\n**Data Set Characteristics:**\\n\\n    :Number of Instances: 20640\\n\\n    :Number of Attributes: 8 numeric, predictive attributes and the target\\n\\n    :Attribute Information:\\n        - MedInc        median income in block group\\n        - HouseAge      median house age in block group\\n        - AveRooms      average number of rooms per household\\n        - AveBedrms     average number of bedrooms per household\\n        - Population    block group population\\n        - AveOccup      average number of household members\\n        - Latitude      block group latitude\\n        - Longitude     block group longitude\\n\\n    :Missing Attribute Values: None\\n\\nThis dataset was obtained from the StatLib repository.\\nhttps://www.dcc.fc.up.pt/~ltorgo/Regression/cal_housing.html\\n\\nThe target variable is the median house value for California districts,\\nexpressed in hundreds of thousands of dollars ($100,000).\\n\\nThis dataset was derived from the 1990 U.S. census, using one row per census\\nblock group. A block group is the smallest geographical unit for which the U.S.\\nCensus Bureau publishes sample data (a block group typically has a population\\nof 600 to 3,000 people).\\n\\nAn household is a group of people residing within a home. Since the average\\nnumber of rooms and bedrooms in this dataset are provided per household, these\\ncolumns may take surpinsingly large values for block groups with few households\\nand many empty houses, such as vacation resorts.\\n\\nIt can be downloaded/loaded using the\\n:func:`sklearn.datasets.fetch_california_housing` function.\\n\\n.. topic:: References\\n\\n    - Pace, R. Kelley and Ronald Barry, Sparse Spatial Autoregressions,\\n      Statistics and Probability Letters, 33 (1997) 291-297\\n'}"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["X"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eQnONvlJC4nl","executionInfo":{"status":"ok","timestamp":1676100512814,"user_tz":300,"elapsed":182,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"5ad76fb7-655f-44c5-ec89-652e4db58c0f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[   8.3252    ,   41.        ,    6.98412698, ...,    2.55555556,\n","          37.88      , -122.23      ],\n","       [   8.3014    ,   21.        ,    6.23813708, ...,    2.10984183,\n","          37.86      , -122.22      ],\n","       [   7.2574    ,   52.        ,    8.28813559, ...,    2.80225989,\n","          37.85      , -122.24      ],\n","       ...,\n","       [   1.7       ,   17.        ,    5.20554273, ...,    2.3256351 ,\n","          39.43      , -121.22      ],\n","       [   1.8672    ,   18.        ,    5.32951289, ...,    2.12320917,\n","          39.43      , -121.32      ],\n","       [   2.3886    ,   16.        ,    5.25471698, ...,    2.61698113,\n","          39.37      , -121.24      ]])"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["y"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9leam3lgDPzc","executionInfo":{"status":"ok","timestamp":1676100513735,"user_tz":300,"elapsed":2,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"ba3f9d93-7fb2-474f-875e-b176f9a7ca15"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([4.526, 3.585, 3.521, ..., 0.923, 0.847, 0.894])"]},"metadata":{},"execution_count":29}]},{"cell_type":"markdown","metadata":{"id":"mNlDvFjuKtq2"},"source":["2. Diviser le jeu de données en données d'entraînement (80%) et données de test (20%)."]},{"cell_type":"code","metadata":{"id":"zAR1K68pKu7N"},"source":["#Faire le split avec la fonction 'train_test_split'\n","from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"I3z_pvWcKyIN"},"source":["3. Normaliser les données d'entraînement et de test."]},{"cell_type":"code","metadata":{"id":"6vggqGuRKzOs"},"source":["# Normaliser avec la fonction 'StandardScaler'\n","from sklearn.preprocessing import StandardScaler\n","\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zoTdC8VsNEN-"},"source":["4. Construire puis entraîner les données avec les SVM linéaires.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0RXpuSxtNOO9","executionInfo":{"status":"ok","timestamp":1676100524372,"user_tz":300,"elapsed":894,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"4149650a-54c5-4ae1-fc29-01f87a2d94ef"},"source":["#Construire puis entraîner les données avec les SVM linéaires\n","from sklearn.svm import LinearSVR\n","\n","lin_svr = LinearSVR()\n","lin_svr.fit(X_train_scaled, y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/sklearn/svm/_base.py:1206: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["LinearSVR()"]},"metadata":{},"execution_count":32}]},{"cell_type":"markdown","metadata":{"id":"rN-x90NEK4Jg"},"source":["5. Mesurer l'erreur du modèle trouvé."]},{"cell_type":"code","metadata":{"id":"tU4tj8h6K5RR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1676100530007,"user_tz":300,"elapsed":148,"user":{"displayName":"Naklan Julien Camara","userId":"15083636647543266144"}},"outputId":"490f8188-7680-4f6b-9e21-9d7e3edd95b2"},"source":["#Mesurer l'erreur du modèle trouvé.\n","from sklearn.metrics import mean_squared_error\n","import numpy as np\n","\n","y_pred = lin_svr.predict(X_train_scaled)\n","mse = mean_squared_error(y_train, y_pred)\n","\n","rmse = np.sqrt(mse)\n","print(rmse)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.979214815469207\n"]}]}]}